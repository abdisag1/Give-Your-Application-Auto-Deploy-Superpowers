version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.0
parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
commands:
  dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Reverting migrations
          when: on_fail
          command: |
            SUCCESS=$(curl "https://kvdb.io/H95GxqU6jP4NtRKsceJ2fU//migration_<<parameters.workflow_id>>" -H "X-Api-Key: ${THISDB_API_KEY}")
            if (($SUCCESS == 1)); then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Frontend Unit Test
          command: |
            cd frontend
            npm install
            npm test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: backend unit test
          command: |
            cd backend
            npm install
            npm test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: backend scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum update -y
            yum install tar -y
            yum install gzip -y
      - run:
          name: ensure back-end infrastructure exit
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/frontend.yml \
             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
             --tags project=udapeople
      - run:
          name: Add Ec2 IP into inventory.txt file for use by Ansible
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["45:44:e9:b4:35:84:f7:3f:e3:f9:5f:e5:a0:95:2a:b1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Run migrations
          command: |
            cd backend
            # cat .env
            npm i
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          name: Sending migration status to kvdb
          command: |
            if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
            then
              curl https://kvdb.io/H95GxqU6jP4NtRKsceJ2fU//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "1"
            else
              curl https://kvdb.io/H95GxqU6jP4NtRKsceJ2fU//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "0"
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y && yum install -y sudo
            sudo yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_16.x | sudo -E bash -
            sudo yum install nodejs -y
            yum install tar -y
            yum install gzip -y
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
      - attach_workspace:
          at: ~/

      - run:
          name: Get Backend Url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy front-end object
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["45:44:e9:b4:35:84:f7:3f:e3:f9:5f:e5:a0:95:2a:b1"]

      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
            npm run build
            cd ..
      - run:
          name: Package Backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz  ~/
      - run:
          name: Checking the existence of inventory.txt && artifact.tar.gz file
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            echo "Contents of files folder is -------"
            ls ~/
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo ${API_URL}
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      

  cloudfront-update:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - dependencies
      - run:
          name: get old workflow for clean
          command: |
            OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            curl https://kvdb.io/H95GxqU6jP4NtRKsceJ2fU//migration_${CIRCLE_WORKFLOW_ID:0:7} \
            -H "X-Api-Key: ${THISDB_API_KEY}" \
            -d "$OldWorkflowID"
      - run:
          name: Updating cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "Old Workflow ID: ${OldWorkflowID}"
            if [ "${OldWorkflowID}" != "<< pipeline.parameters.workflow-id >>" ]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  my_workflow:
    jobs:
      - build_frontend
      - build_backend
      - test-frontend:
          requires: [build_frontend]
      - test-backend:
          requires: [build_backend]
      - scan-frontend:
          requires: [build_frontend]
      - scan-backend:
          requires: [build_backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
